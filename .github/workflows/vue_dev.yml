name: Vue Udate [_Dev]

on:
  push:
    paths:
      - "app/vue/**"
      - ".github/workflows/vue_dev.yml"
    branches: [ "develop" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# job은 사용자가 정한 플랫폼을 통해 steps 라는 일련의 과정을 실행.
# 여러 개의 job 을 사용할 수 있으며, 여러 개의 job 을 사용할 때는 서로 정보도 교환 가능.
# 각각 독립적으로도 실행 가능.
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      # 레파지터리 체크 아웃
      - name: Check out source code
        uses: actions/checkout@v3
        with:
          ref: 'develop'

      # Node.js 사용
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # pnpm use
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false

      # node_modules 캐싱
      - name: Cache vue node
        uses: actions/cache@v3
        id: cache_vue
        with:
          path: ./app/vue/node_modules
          key: pnpm-packages-${{ hashFiles('**/pnpm-lock.yaml') }}

      # node_modules 변화기 있으면 빌드
      - name: Install Dependencies
        if: steps.cache_vue.outputs.cache-hit != 'true'
        run: cd app/vue && pnpm i

      #      - run: pnpm lint
      #        # `if: ${{ always() }}`
      #        # 만약 `pnpm lint`라는 곳에서 에러가 났을 경우 이후 build를 실행하지 않고 해당 workflow가 종료됨.
      #        # `if: ${{ always() }}`라는 문법을 사용 시 `pnpm lint`라는 곳에서 에러가 나도
      #        # 이후의 build까지 다 실행을 해보고 난 뒤 종료 하므로 모든 테스트 스크립트에 `if: ${{ always() }}`를 붙임.
      #        if: ${{ always() }}

      - name: Build the Source Code
        run: cd app/vue && pnpm build

      - name: Vue Unit Test using Vitest
        run: cd app/vue && pnpm test:unit

      # data to server copy transfer
      - name: Copy django, etc data to CI/CD server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USERNAME }}
          password: ${{ secrets.CICD_PASSWORD }}
          source: 'app/django'
          target: '/mnt/nfs/dev'

      # slack --> notification
      - name: Send slack when failed
        if: ${{ failure() }}                    # 실패했을 때 실행
        uses: ./.github/actions/slack-notify    # 직접 '만든' Action이므로 uses 키워드를 이용해서 아래 경로를 입력해줍니다.
        with:
          slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}

      - name: Send slack if completed
        if: ${{ success() }}                    # 성공할 때만 실행
        uses: ./.github/actions/slack-notify
        with:
          status: success   # status input은 받는 쪽에서 default 값을 정해놨기 때문에 success일 때만 전달.
          slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}
