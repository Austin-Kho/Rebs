name: Initial Setup [Dev]

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# job은 사용자가 정한 플랫폼을 통해 steps 라는 일련의 과정을 실행.
# 여러 개의 job 을 사용할 수 있으며, 여러 개의 job 을 사용할 때는 서로 정보도 교환 가능.
# 각각 독립적으로도 실행 가능.
jobs:
  build:
    name: Build

    runs-on: ubuntu-latest

    steps:
      - name: Check out source code
        uses: actions/checkout@v3

      # data to server copy transfer
      - name: Copy helm, to CI/CD server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USERNAME }}
          password: ${{ secrets.CICD_PASSWORD }}
          source: '.'
          target: '/mnt/nfs/dev/'

      # helm install or upgrade
      - name: SSH Remote Commands from ci/cd server
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USERNAME }}
          password: ${{ secrets.CICD_PASSWORD }}
          command: |
            cd ${{ secrets.NFS_PATH }}/dev/
            sh ./volume/backups/mysql_chk.sh
            rm -rf .git* README.md app/vue app/svelte deploy/docker*
            kubectl apply -f ./deploy/kubectl/ns-dev.yaml
            helm upgrade ${{ secrets.DATABASE_USER }} ./deploy/helm --install -f ./deploy/helm/values-dev.yaml -n dev-hrebs \
              --set global.dbPassword=${{ secrets.DATABASE_PASSWORD }} \
              --set global.nfsPath=${{ secrets.NFS_PATH }} \
              --set global.nfsServerHost=${{ secrets.CICD_HOST }} \
              --set 'nginx.ingress.tls[0].hosts[0]'=dev.${{ secrets.DOMAIN_NAME }} \
              --set 'nginx.ingress.hosts[0].host'=dev.${{ secrets.DOMAIN_NAME }} \
              --set 'nginx.ingress.hosts[1].paths[0].path'=/ \
              --set 'nginx.ingress.hosts[1].paths[0].pathType'=ImplementationSpecific \
              --set 'nginx.ingress.hosts[2].paths[0].path'=/ \
              --set 'nginx.ingress.hosts[2].paths[0].pathType'=ImplementationSpecific
            web_pod=$(kubectl get pod -n dev-hrebs | grep web | cut -d ' ' -f1)
            kubectl exec -it -n dev-hrebs $web_pod -- python manage.py makemigrations accounts book cash company contract document items notice payment project rebs
            kubectl exec -it -n dev-hrebs $web_pod -- python manage.py migrate
            kubectl exec -it -n dev-hrebs $web_pod -- python manage.py collectstatic --no-input

      # Node.js 사용
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # node_modules 캐싱
      - name: Cache vue node
        uses: actions/cache@v3
        id: cache_vue
        with:
          path: ./app/vue/node_modules
          key: yarn-packages-${{ hashFiles('**/yarn.lock') }}

      # node_modules 변화기 있으면 빌드
      - name: Install Dependencies
        if: steps.cache_vue.outputs.cache-hit != 'true'
        run: cd app/vue && yarn

      #      - run: yarn lint
      #        # `if: ${{ always() }} => ` 만약 `yarn lint`라는 곳에서 에러가 났을 경우
      #        # 이후 build를 실행하지 않고 해당 workflow가 종료됨.
      #        # ${{ always() }}라는 문법을 사용 시 `yarn lint`라는 곳에서 에러가 나도
      #        # 이후의 build까지 다 실행을 해보고 난 뒤 종료 하므로 모든 테스트 스크립트에 ${{ always() }}를 붙임.
      #        if: ${{ always() }}

      - run: cd app/vue && yarn build
        if: ${{ always() }}

      # data to server copy transfer
      - name: Copy django, etc data to CI/CD server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USERNAME }}
          password: ${{ secrets.CICD_PASSWORD }}
          source: 'app/django'
          target: '/mnt/nfs/dev'

      # node_modules 캐싱
      - name: Cache svelte node
        uses: actions/cache@v3
        id: cache_svelte
        with:
          path: ./app/svelte/node_modules
          key: yarn-packages-${{ hashFiles('**/yarn.lock') }}

      # node_modules 변화기 있으면 빌드
      - name: Install Dependencies
        if: steps.cache_svelte.outputs.cache-hit != 'true'
        run: cd app/svelte && yarn

      - run: cd app/svelte && yarn build
        if: ${{ always() }}

      # data to server copy transfer
      - name: Copy django, etc data to CI/CD server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USERNAME }}
          password: ${{ secrets.CICD_PASSWORD }}
          source: 'app/django'
          target: '/mnt/nfs/dev'

      - name: Send slack when failed
        if: ${{ failure() }}                    # 실패했을 때 실행
        uses: ./.github/actions/slack-notify    # 직접 '만든' Action이므로 uses 키워드를 이용해서 아래 경로를 입력해줍니다.
        with:
          slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}

      - name: Send slack if completed
        if: ${{ success() }}                    # 성공할 때만 실행
        uses: ./.github/actions/slack-notify
        with:
          status: success   # status input은 받는 쪽에서 default 값을 정해놨기 때문에 success일 때만 전달.
          slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}
